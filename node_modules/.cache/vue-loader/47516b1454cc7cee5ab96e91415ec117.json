{"remainingRequest":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/src/views/curso/Tema2.vue?vue&type=template&id=2c989053&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/src/views/curso/Tema2.vue","mtime":1743284234583},{"path":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Gerencia_Financiera_B6/U1_Gerencia_Financiera_B6/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gRWxhYm9yYWNpw7NuIHkgZXN0cnVjdHVyYSBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcyciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5vdmVyZmxvdy1oaWRkZW4KCiAgICAucm93Lm1iLTUuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLW1kLTguY29sLWxnLTIubWItMy5tYi1sZy0wLm9yZGVyLWxnLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEuc3ZnIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTEwLm9yZGVyLWxnLTEKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBlbGFib3JhY2nDs24geSBlc3RydWN0dXJhIGRlIGxvcyBlc3RhZG9zIGZpbmFuY2llcm9zIGNvbnN0aXR1eWVuIHBpbGFyZXMgZnVuZGFtZW50YWxlcyBlbiBsYSBjb250YWJpbGlkYWQgeSBnZXN0acOzbiBlbXByZXNhcmlhbC4gRXN0b3MgZG9jdW1lbnRvcyBicmluZGFuIHVuYSByZXByZXNlbnRhY2nDs24gZXN0cnVjdHVyYWRhIGRlIGxhIHNpdHVhY2nDs24gZmluYW5jaWVyYSwgZWwgcmVuZGltaWVudG8geSBsb3MgZmx1am9zIGRlIGVmZWN0aXZvIGRlIHVuYSBlbnRpZGFkIGVuIHVuIHBlcsOtb2RvIGRldGVybWluYWRvLCBsbyBxdWUgcG9zaWJpbGl0YSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgaW5mb3JtYWRhcyBwb3IgcGFydGUgZGUgZGl2ZXJzb3MgdXN1YXJpb3MuIExvcyBwcmluY2lwYWxlcyBlc3RhZG9zIGZpbmFuY2llcm9zIHkgc3VzIGZ1bmNpb25lcyBzZSBwcmVzZW50YW4gYSBjb250aW51YWNpw7NuOiAKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNi5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMi5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAgICAgLmNvbC1sZy04Lm1iLTMubWItbGctMC5vcmRlci0xCiAgICAgICAgCiAgICAgICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgICAgICAuZGl2KHRpdHVsbz0iRXN0YWRvIGRlIHNpdHVhY2nDs24gZmluYW5jaWVyYSAoQmFsYW5jZSBHZW5lcmFsKSIpCiAgICAgICAgICAgICAgICBwIFByZXNlbnRhIGxvcyBhY3Rpdm9zLCBwYXNpdm9zIHkgcGF0cmltb25pbyBkZSBsYSBlbXByZXNhIGVuIHVuYSBmZWNoYSBlc3BlY8OtZmljYSwgcmVmbGVqYW5kbyBzdSBwb3NpY2nDs24gZmluYW5jaWVyYS4gRWplbXBsbzogc2kgdW5hIGVtcHJlc2EgdGllbmUgYWN0aXZvcyBkZSAkNTAwLDAwMCB5IHBhc2l2b3MgZGUgJDIwMCwwMDAsIHN1IHBhdHJpbW9uaW8gbmV0byBzZXLDrWEgZGUgJDMwMCwwMDAuCiAgICAgICAgCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IkVzdGFkbyBkZSByZXN1bHRhZG9zIikKICAgICAgICAgICAgICAgIHAgTXVlc3RyYSBlbCBkZXNlbXBlw7FvIGZpbmFuY2llcm8gZHVyYW50ZSB1biBwZXLDrW9kbywgZGV0YWxsYW5kbyBpbmdyZXNvcywgY29zdG9zIHkgZ2FzdG9zLiBTdSBmdW5jacOzbiBlcyBldmFsdWFyIGxhIHJlbnRhYmlsaWRhZCBvcGVyYXRpdmEuIEVqZW1wbG86IGluZ3Jlc29zIGRlICQxNTAsMDAwIHkgZ2FzdG9zIGRlICQxMjAsMDAwIGdlbmVyYW4gdW5hIHV0aWxpZGFkIG5ldGEgZGUgJDMwLDAwMC4KICAgICAgICAKICAgICAgICAgICAgICAuZGl2KHRpdHVsbz0iRXN0YWRvIGRlIGNhbWJpb3MgZW4gZWwgcGF0cmltb25pbyBuZXRvIikKICAgICAgICAgICAgICAgIHAgUmVmbGVqYSBsYXMgdmFyaWFjaW9uZXMgZW4gZWwgcGF0cmltb25pbyBkZSBsYSBlbXByZXNhLCBpbmNsdXllbmRvIGFwb3J0ZXMgZGUgcHJvcGlldGFyaW9zLCByZXRpcm9zIHkgdXRpbGlkYWRlcyByZXRlbmlkYXMuIEVqZW1wbG86IHNpIGxvcyBwcm9waWV0YXJpb3MgYXBvcnRhbiAkNTAsMDAwIGFkaWNpb25hbGVzIHkgc2UgcmV0aWVuZW4gdXRpbGlkYWRlcyBwb3IgJDIwLDAwMCwgZWwgcGF0cmltb25pbyBhdW1lbnRhIGVuICQ3MCwwMDAuCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IkVzdGFkbyBkZSBmbHVqb3MgZGUgZWZlY3Rpdm8iKQogICAgICAgICAgICAgICAgcCBJbmZvcm1hIHNvYnJlIGxvcyBtb3ZpbWllbnRvcyBkZSBlZmVjdGl2bywgY2xhc2lmaWNhZG9zIGVuIGFjdGl2aWRhZGVzIG9wZXJhdGl2YXMsIGRlIGludmVyc2nDs24geSBmaW5hbmNpYW1pZW50by4gRWplbXBsbzogdW4gZmx1am8gcG9zaXRpdm8gZGUgJDQwLDAwMCBlbiBhY3RpdmlkYWRlcyBvcGVyYXRpdmFzIHkgbmVnYXRpdm8gZGUgJDIwLDAwMCBlbiBpbnZlcnNpw7NuIGRhIHVuIGF1bWVudG8gbmV0byBlbiBlZmVjdGl2byBkZSAkMjAsMDAwLgoKICAgICAgICBwLm1iLTQgRWwgcHJvY2VzbyBkZSBlbGFib3JhY2nDs24gZGUgbG9zIGVzdGFkb3MgZmluYW5jaWVyb3Mgc2lndWUgdW5hIHNlY3VlbmNpYSBsw7NnaWNhIHBhcmEgZ2FyYW50aXphciBwcmVjaXNpw7NuIHkgY29uZmlhYmlsaWRhZDoKCiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8zLnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgUmVnaXN0cm8gZGUgdHJhbnNhY2Npb25lcwkKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgRG9jdW1lbnRhY2nDs24gZGUgdG9kYXMgbGFzIG9wZXJhY2lvbmVzIGZpbmFuY2llcmFzIGVuIGxvcyBsaWJyb3MgY29udGFibGVzIHBhcmEgZ2FyYW50aXphciBsYSBwcmVjaXNpw7NuIHkgY29tcGxldGl0dWQgZGUgbG9zIGRhdG9zLgogICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi80LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgQWp1c3RlcyBjb250YWJsZXMJCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEFwbGljYWNpw7NuIGRlIGFqdXN0ZXMgcGFyYSByZWZsZWphciBnYXN0b3MgZSBpbmdyZXNvcyBhY3VtdWxhZG9zLCBkZXByZWNpYWNpb25lcyB5IHByb3Zpc2lvbmVzLCBhc2VndXJhbmRvIGluZm9ybWFjacOzbiByZWFsaXN0YS4KICAgICAgICAKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNS5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEVsYWJvcmFjacOzbiBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcwkJCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIENyZWFjacOzbiBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcyBwcmluY2lwYWxlcyBzaWd1aWVuZG8gbGFzIG5vcm1hdGl2YXMgY29udGFibGVzIHZpZ2VudGVzLgogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi82LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgTm90YXMgZXhwbGljYXRpdmFzCQkKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgSW5jbHVzacOzbiBkZSBkZXRhbGxlcyBhZGljaW9uYWxlcyBzb2JyZSBwYXJ0aWRhcyBlc3BlY8OtZmljYXMsIHBvbMOtdGljYXMgY29udGFibGVzIGFwbGljYWRhcyB5IG90cmEgaW5mb3JtYWNpw7NuIHJlbGV2YW50ZS4KCiAgICBwLm1iLTQgRXN0b3MgZG9jdW1lbnRvcyBzb24gZXNlbmNpYWxlcyBwYXJhIGRpdmVyc29zIHVzdWFyaW9zOgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLWluZm8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICBJbWFnZW5JbmZvZ3JhZmljYS5jb2xvci1zZWN1bmRhcmlvCiAgICAgICAgICAgICAgdGVtcGxhdGUodi1zbG90OmltYWdlbikKICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi83LnN2ZycsIGFsdD0nJywgc3R5bGU9Im1heC13aWR0aDogMTEwNnB4OyIpLm14LWF1dG8KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI3JSIgeT0iMTEuNSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSBJbnZlcnNpb25pc3RhcwogICAgICAgICAgICAgICAgcCBFdmFsw7phbiBsYSByZW50YWJpbGlkYWQgeSBlc3RhYmlsaWRhZCBkZSBsYSBlbXByZXNhIHBhcmEgdG9tYXIgZGVjaXNpb25lcyBkZSBpbnZlcnNpw7NuLgogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjclIiB5PSI1NyUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSBBY3JlZWRvcmVzCiAgICAgICAgICAgICAgICBwIEFuYWxpemFuIGxhIGNhcGFjaWRhZCBkZSBsYSBlbXByZXNhIHBhcmEgY3VtcGxpciBjb24gc3VzIG9ibGlnYWNpb25lcyBmaW5hbmNpZXJhcy4KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI5MyUiIHk9IjExLjUlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgRGlyZWN0aXZvcwogICAgICAgICAgICAgICAgcCBVdGlsaXphbiBsYSBpbmZvcm1hY2nDs24gcGFyYSBwbGFuaWZpY2FyIHkgZGlyaWdpciBvcGVyYWNpb25lcyBlbXByZXNhcmlhbGVzLgogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjkzJSIgeT0iNTclIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgRW50aWRhZGVzIGd1YmVybmFtZW50YWxlcwogICAgICAgICAgICAgICAgcCBTdXBlcnZpc2FuIGVsIGN1bXBsaW1pZW50byBkZSByZWd1bGFjaW9uZXMgeSBvYmxpZ2FjaW9uZXMgZmlzY2FsZXMuCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTIubWItNQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzguc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wIFVuYSBjb21wcmVuc2nDs24gcHJvZnVuZGEgZGUgbGEgZWxhYm9yYWNpw7NuIHkgZXN0cnVjdHVyYSBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcyBlcyB2aXRhbCBwYXJhIGdhcmFudGl6YXIgbGEgdHJhbnNwYXJlbmNpYSwgY29uZmlhYmlsaWRhZCB5IHJlbGV2YW5jaWEgZGUgbGEgaW5mb3JtYWNpw7NuIHByZXNlbnRhZGEuICAgCgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMV0gVGlwb3MgZGUgZXN0YWRvcyBmaW5hbmNpZXJvcyB5IHN1IGZ1bmNpw7NuIGVuIGxhIG9yZ2FuaXphY2nDs24KCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5iZy1jb2xvci0xLnAtNC5tYi0zKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIExvcyBlc3RhZG9zIGZpbmFuY2llcm9zIHByb3BvcmNpb25hbiB1bmEgdmlzacOzbiBkZXRhbGxhZGEgZGUgbGEgc2l0dWFjacOzbiBlY29uw7NtaWNhIHkgZmluYW5jaWVyYSBkZSB1bmEgb3JnYW5pemFjacOzbiBlbiB1biBwZXLDrW9kbyBlc3BlY8OtZmljby4gRXN0b3MgaW5mb3JtZXMgcGVybWl0ZW4gYSBsb3MgZ2VzdG9yZXMsIGludmVyc29yZXMgeSBvdHJhcyBwYXJ0ZXMgaW50ZXJlc2FkYXMgdG9tYXIgZGVjaXNpb25lcyBpbmZvcm1hZGFzIHNvYnJlIGxhIGRpcmVjY2nDs24geSBnZXN0acOzbiBkZSBsYSBlbXByZXNhLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEEgY29udGludWFjacOzbiwgc2UgZGV0YWxsYW4gbG9zIHByaW5jaXBhbGVzIHRpcG9zIGRlIGVzdGFkb3MgZmluYW5jaWVyb3MgeSBzdSBmdW5jacOzbiBlbiBsYSBvcmdhbml6YWNpw7NuOgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci01Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMS5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAgICAgLmNvbC1sZy04Lm1iLTMubWItbGctMC5vcmRlci0xCiAgICAgICAgCiAgICAgICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgICAgICAuZGl2KHRpdHVsbz0iQmFsYW5jZSBnZW5lcmFsIChlc3RhZG8gZGUgc2l0dWFjacOzbiBmaW5hbmNpZXJhKSIpCiAgICAgICAgICAgICAgICBwIE11ZXN0cmEgbGEgcG9zaWNpw7NuIGZpbmFuY2llcmEgZGUgbGEgZW1wcmVzYSwgZXZpZGVuY2lhbmRvIGxvIHF1ZSBwb3NlZSAoYWN0aXZvcyksIGxvIHF1ZSBkZWJlIChwYXNpdm9zKSB5IGVsIGNhcGl0YWwgYXBvcnRhZG8gcG9yIGxvcyBwcm9waWV0YXJpb3MgKHBhdHJpbW9uaW8pLiBFamVtcGxvOiBhY3Rpdm9zIGRlICQ1MDAsMDAwIHkgcGFzaXZvcyBkZSAkMjAwLDAwMCByZXN1bHRhbiBlbiB1biBwYXRyaW1vbmlvIG5ldG8gZGUgJDMwMCwwMDAuCiAgICAgICAgCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IkVzdGFkbyBkZSByZXN1bHRhZG9zIChlc3RhZG8gZGUgcMOpcmRpZGFzIHkgZ2FuYW5jaWFzKSIpCiAgICAgICAgICAgICAgICBwIEV2YWzDumEgbGEgcmVudGFiaWxpZGFkIG9wZXJhdGl2YSBkZSBsYSBlbXByZXNhLCBkZXRhbGxhbmRvIGluZ3Jlc29zLCBjb3N0b3MgeSBnYXN0b3MuIEVqZW1wbG86IGluZ3Jlc29zIGRlICQxNTAsMDAwIHkgZ2FzdG9zIGRlICQxMjAsMDAwIGdlbmVyYW4gdW5hIHV0aWxpZGFkIG5ldGEgZGUgJDMwLDAwMC4KICAgICAgICAKICAgICAgICAgICAgICAuZGl2KHRpdHVsbz0iRXN0YWRvIGRlIGZsdWpvcyBkZSBlZmVjdGl2byIpCiAgICAgICAgICAgICAgICBwIFByb3BvcmNpb25hIGluZm9ybWFjacOzbiBzb2JyZSBsYSBsaXF1aWRleiBkZSBsYSBlbXByZXNhIGFsIG1vc3RyYXIgbG9zIG1vdmltaWVudG9zIGRlIGVmZWN0aXZvIGVuIGFjdGl2aWRhZGVzIG9wZXJhdGl2YXMsIGRlIGludmVyc2nDs24geSBmaW5hbmNpYW1pZW50by4gRWplbXBsbzogZmx1am8gcG9zaXRpdm8gZGUgJDQwLDAwMCBlbiBvcGVyYWNpb25lcyB5IG5lZ2F0aXZvIGRlICQyMCwwMDAgZW4gaW52ZXJzacOzbiBpbmRpY2EgdW4gYXVtZW50byBuZXRvIGVuIGVmZWN0aXZvIGRlICQyMCwwMDAuCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IkVzdGFkbyBkZSBjYW1iaW9zIGVuIGVsIHBhdHJpbW9uaW8gbmV0byIpCiAgICAgICAgICAgICAgICBwIEV4cGxpY2EgbGFzIHZhcmlhY2lvbmVzIGVuIGVsIHBhdHJpbW9uaW8gZGUgbGEgZW1wcmVzYSBhIGxvIGxhcmdvIGRlbCBwZXLDrW9kbyBjb250YWJsZS4gRWplbXBsbzogdW4gYXBvcnRlIGRlICQ1MCwwMDAgeSB1dGlsaWRhZGVzIHJldGVuaWRhcyBkZSAkMjAsMDAwIHJlc3VsdGFuIGVuIHVuIGluY3JlbWVudG8gcGF0cmltb25pYWwgZGUgJDcwLDAwMC4KICAgICAgICAgICAgICAuZGl2KHRpdHVsbz0iZXN0YWRvIGRlIGNhbWJpb3MgZW4gbGEgc2l0dWFjacOzbiBmaW5hbmNpZXJhIikKICAgICAgICAgICAgICAgIHAgQW5hbGl6YSBtb2RpZmljYWNpb25lcyBlbiBsYSBwb3NpY2nDs24gZmluYW5jaWVyYSBlbnRyZSBkb3MgZmVjaGFzLCBpZGVudGlmaWNhbmRvIGZ1ZW50ZXMgeSBhcGxpY2FjaW9uZXMgZGUgcmVjdXJzb3MuIEVqZW1wbG86IHVuIGF1bWVudG8gZW4gY3VlbnRhcyBwb3IgY29icmFyIGluZGljYSB2ZW50YXMgYSBjcsOpZGl0bywgbWllbnRyYXMgcXVlIHVuYSBkaXNtaW51Y2nDs24gZW4gZWZlY3Rpdm8gcmVmbGVqYSBwYWdvcyBkZSBkZXVkYXMuCiAgICAKICAgICAgICBwLm1iLTQgTGEgY29ycmVjdGEgZWxhYm9yYWNpw7NuIHkgYW7DoWxpc2lzIGRlIGVzdG9zIGVzdGFkb3MgZmluYW5jaWVyb3MgcGVybWl0ZW4gdG9tYXIgZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzIHkgZ2FyYW50aXphciBsYSBzb3N0ZW5pYmlsaWRhZCBkZSBsYSBlbXByZXNhLgogICAgICAgIAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTIucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBUb21hIGRlIGRlY2lzaW9uZXMgaW5mb3JtYWRhcwkKICAgICAgICAgICAgICAgIHAubWItMCBQcm9wb3JjaW9uYW4gZGF0b3MgY2xhdmUgcGFyYSBwbGFuaWZpY2FyIGVzdHJhdGVnaWFzLCBldmFsdWFyIGludmVyc2lvbmVzIHkgb3B0aW1pemFyIHJlY3Vyc29zLgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEzLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgVHJhbnNwYXJlbmNpYSB5IGNvbmZpYW56YQkKICAgICAgICAgICAgICAgIHAubWItMCBGYWNpbGl0YW4gbGEgY29tdW5pY2FjacOzbiBjbGFyYSBjb24gaW52ZXJzb3JlcywgYWNyZWVkb3JlcyB5IG90cmFzIHBhcnRlcyBpbnRlcmVzYWRhcy4KICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNC5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIEN1bXBsaW1pZW50byBub3JtYXRpdm8JCiAgICAgICAgICAgICAgICBwLm1iLTAgQXNlZ3VyYW4gcXVlIGxhIGVtcHJlc2EgY3VtcGxhIGNvbiBsYXMgcmVndWxhY2lvbmVzIGNvbnRhYmxlcyB5IGZpc2NhbGVzIHZpZ2VudGVzLgogICAgCiAgICBwLm1iLTQgRXN0b3MgZXN0YWRvcyBmaW5hbmNpZXJvcyBwZXJtaXRlbiB1biBjb250cm9sIGVmaWNpZW50ZSBkZSBsb3MgcmVjdXJzb3MgeSBmb3J0YWxlY2VuIGxhIHBvc2ljacOzbiBkZSBsYSBlbXByZXNhIGVuIGVsIG1lcmNhZG8uCgogICAgI3RfMl8yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMl0gTm9ybWF0aXZhcyBjb250YWJsZXMgeSBmaW5hbmNpZXJhcyBhcGxpY2FkYXMgYSBsYSBlbGFib3JhY2nDs24gZGUgZXN0YWRvcwogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE1LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTIucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTAgTGFzIG5vcm1hdGl2YXMgY29udGFibGVzIHkgZmluYW5jaWVyYXMgZXN0YWJsZWNlbiBsb3MgbGluZWFtaWVudG9zIHkgcHJpbmNpcGlvcyBxdWUgZ2FyYW50aXphbiBsYSBjb2hlcmVuY2lhLCB0cmFuc3BhcmVuY2lhIHkgY29tcGFyYWJpbGlkYWQgZGUgbGEgaW5mb3JtYWNpw7NuIGZpbmFuY2llcmEgcHJlc2VudGFkYSBwb3IgbGFzIG9yZ2FuaXphY2lvbmVzLiBTdSBhcGxpY2FjacOzbiBhc2VndXJhIHF1ZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcyByZWZsZWplbiBkZSBtYW5lcmEgZmlkZWRpZ25hIGxhIHNpdHVhY2nDs24gZWNvbsOzbWljYSBkZSBsYSBlbnRpZGFkLCBmYWNpbGl0YW5kbyBsYSB0b21hIGRlIGRlY2lzaW9uZXMgaW5mb3JtYWRhcyBwb3IgcGFydGUgZGUgbG9zIHVzdWFyaW9zIGludGVyZXNhZG9zLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIGxhcyBwcmluY2lwYWxlcyBub3JtYXRpdmFzIGNvbnRhYmxlcyBhcGxpY2FkYXMgZW4gbGEgZWxhYm9yYWNpw7NuIGRlIGVzdGFkb3MgZmluYW5jaWVyb3M6CiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTYubWItNQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMKICAgICAgICBUYWJzQy5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTUKICAgICAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJOb3JtYXMgSW50ZXJuYWNpb25hbGVzIGRlIEluZm9ybWFjacOzbiBGaW5hbmNpZXJhIChOSUlGKSIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvMi5zdmcnKSIpCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgICAgIGg0IE5vcm1hcyBJbnRlcm5hY2lvbmFsZXMgZGUgSW5mb3JtYWNpw7NuIEZpbmFuY2llcmEgKE5JSUYpCiAgICAgICAgICAgICAgICBwLm1iLTAgRW1pdGlkYXMgcG9yIGVsIDxlbT5JbnRlcm5hdGlvbmFsIEFjY291bnRpbmcgU3RhbmRhcmRzIEJvYXJkPC9lbT4gKElBU0IpLCB1bmlmaWNhbiBjcml0ZXJpb3MgY29udGFibGVzIGEgbml2ZWwgZ2xvYmFsLCBwZXJtaXRpZW5kbyBsYSBjb21wYXJhYmlsaWRhZCBlbnRyZSBlbXByZXNhcyBkZSBkaWZlcmVudGVzIHBhw61zZXMuIEFiYXJjYW4gZGVzZGUgZWwgcmVjb25vY2ltaWVudG8geSBtZWRpY2nDs24gZGUgYWN0aXZvcyB5IHBhc2l2b3MgaGFzdGEgbGEgcHJlc2VudGFjacOzbiBkZSBpbmdyZXNvcyB5IGdhc3Rvcy4gRWplbXBsbzogbGEgTklJRiAxNSBlc3RhYmxlY2UgY3JpdGVyaW9zIHBhcmEgZWwgcmVjb25vY2ltaWVudG8gZGUgaW5ncmVzb3MgZW4gZnVuY2nDs24gZGUgbGEgdHJhbnNmZXJlbmNpYSBkZSBjb250cm9sIGRlIGJpZW5lcyBvIHNlcnZpY2lvcy4KICAgICAgICAKICAgICAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzE2LnBuZycsIGFsdD0nJykKICAgICAgICAKICAgICAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJOb3JtYXMgSW50ZXJuYWNpb25hbGVzIGRlIENvbnRhYmlsaWRhZCAoTklDKSIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvMi5zdmcnKSIpCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgICAgIGg0IE5vcm1hcyBJbnRlcm5hY2lvbmFsZXMgZGUgQ29udGFiaWxpZGFkIChOSUMpCiAgICAgICAgICAgICAgICBwLm1iLTAgRW1pdGlkYXMgYW50ZXMgZGUgbGEgYWRvcGNpw7NuIGRlIGxhcyBOSUlGLCBzaWd1ZW4gdmlnZW50ZXMgeSBjb21wbGVtZW50YW4gZWwgbWFyY28gbm9ybWF0aXZvIGFjdHVhbC4gTGEgTklDIDEgcmVndWxhIGxhIHByZXNlbnRhY2nDs24gZGUgbG9zIGVzdGFkb3MgZmluYW5jaWVyb3MsIGdhcmFudGl6YW5kbyBxdWUgbGEgaW5mb3JtYWNpw7NuIHNlYSBjb21wYXJhYmxlLCByZWxldmFudGUgeSBjb21wcmVuc2libGUgcGFyYSBsb3MgdXN1YXJpb3MuIEVqZW1wbG86IGVuZmF0aXphIGxhIGltcG9ydGFuY2lhIGRlIGxhIGJhc2UgZGUgYWN1bXVsYWNpw7NuIChkZXZlbmdvKSB5IGxhIGNvbnNpc3RlbmNpYSBlbiBsYSBwcmVzZW50YWNpw7NuLgogICAgICAgIAogICAgICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMTcucG5nJywgYWx0PScnKQoKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQXBsaWNhY2nDs24gcHLDoWN0aWNhIGRlIGxhcyBub3JtYXRpdmFzCiAgICAgICAgcC5tYi01IFBhcmEgaWx1c3RyYXIgY8OzbW8gZXN0YXMgbm9ybWF0aXZhcyBzZSBhcGxpY2FuIGVuIGxhIHByw6FjdGljYSwgc2UgcHJlc2VudGEgZWwgc2lndWllbnRlIGNhc286CgogICAgICAgIGRpdi5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIGRpdi5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTguc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBDb21wcmEgZGUgdW4gYWN0aXZvIGZpam8gKG1hcXVpbmFyaWEpIHBvciAkMTAwLDAwMAkKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgU2UgcmVnaXN0cmEgYWwgY29zdG8gZGUgYWRxdWlzaWNpw7NuIHkgc2UgcmVjb25vY2UgdW5hIGRlcHJlY2lhY2nDs24gYWNvcmRlIGNvbiBzdSB2aWRhIMO6dGlsIGVzdGltYWRhLgogICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOS5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIFZpZGEgw7p0aWwgZXN0aW1hZGEgZGUgMTAgYcOxb3MJCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIFNlIHJlY29ub2NlIHVuIGdhc3RvIGRlIGRlcHJlY2lhY2nDs24gYW51YWwgZGUgJDEwLDAwMC4KICAgICAgICAKICAgICAgICAgIGRpdi5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMjAuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBJbXBhY3RvIGVuIGxvcyBlc3RhZG9zIGZpbmFuY2llcm9zCQogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBSZWZsZWphIGxhIGRpc21pbnVjacOzbiBwcm9ncmVzaXZhIGRlbCB2YWxvciBkZWwgYWN0aXZvIHkgc3UgY29ycmVzcG9uZGllbnRlIGltcGFjdG8gZW4gbG9zIHJlc3VsdGFkb3MgZmluYW5jaWVyb3MuCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBJbXBvcnRhbmNpYSBkZSBsYXMgbm9ybWF0aXZhcyBlbiBsYSBlbGFib3JhY2nDs24gZGUgZXN0YWRvcyBmaW5hbmNpZXJvcwogICAgcC5tYi01IEVsIGN1bXBsaW1pZW50byBkZSBlc3RhcyBub3JtYXRpdmFzIG9mcmVjZSBtw7psdGlwbGVzIGJlbmVmaWNpb3MgcGFyYSBsYXMgb3JnYW5pemFjaW9uZXMgeSBzdXMgZ3J1cG9zIGRlIGludGVyw6lzOgoKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMjEucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04Lm1iLTMubWItbGctMC5vcmRlci0xCiAgICAKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAuZGl2KHRpdHVsbz0iVHJhbnNwYXJlbmNpYSIpCiAgICAgICAgICAgIHAgUHJvcG9yY2lvbmFuIHVuYSByZXByZXNlbnRhY2nDs24gY2xhcmEgeSB2ZXJheiBkZSBsYSBzaXR1YWNpw7NuIGZpbmFuY2llcmEgZGUgbGEgZW50aWRhZC4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkNvbXBhcmFiaWxpZGFkIikKICAgICAgICAgICAgcCBGYWNpbGl0YW4gbGEgY29tcGFyYWNpw7NuIGRlIGluZm9ybWFjacOzbiBmaW5hbmNpZXJhIGVudHJlIGRpZmVyZW50ZXMgcGVyw61vZG9zIHkgZW50aWRhZGVzLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQ29uZmlhbnphIikKICAgICAgICAgICAgcCBHZW5lcmFuIGNyZWRpYmlsaWRhZCBlbnRyZSBpbnZlcnNvcmVzLCBhY3JlZWRvcmVzIHkgb3Ryb3MgPGVtPnN0YWtlaG9sZGVyczwvZW0+IGFsIGFzZWd1cmFyIHF1ZSBsYSBpbmZvcm1hY2nDs24gc2lndWUgZXN0w6FuZGFyZXMgcmVjb25vY2lkb3MgaW50ZXJuYWNpb25hbG1lbnRlLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yCiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICBwLm1iLTAgRWwgdXNvIGFkZWN1YWRvIGRlIGVzdGFzIG5vcm1hdGl2YXMgZ2FyYW50aXphIHF1ZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcyBzZWFuIMO6dGlsZXMgcGFyYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcyB5IGN1bXBsYW4gY29uIGxhcyByZWd1bGFjaW9uZXMgZXN0YWJsZWNpZGFzIGVuIGVsIMOhbWJpdG8gY29udGFibGUgeSBmaW5hbmNpZXJvLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9yZXBvc2l0b3Jpby51c21wLmVkdS5wZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjcyNy8xMTEyL3JpYmJlY2tfZ2NnLnBkZiIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFVuaXZlcnNpZGFkIGRlIFNhbiBNYXJ0w61uIGRlIFBvcnJlcy4gKDIwMTQpLiBBbsOhbGlzaXMgZSBJbnRlcnByZXRhY2nDs24gZGUgRXN0YWRvcyBGaW5hbmNpZXJvczogSGVycmFtaWVudGEgQ2xhdmUgcGFyYSBsYSBUb21hIGRlIERlY2lzaW9uZXMgZW4gbGFzIEVtcHJlc2FzIGRlIGxhIEluZHVzdHJpYSBNZXRhbG1lY8OhbmljYSBkZWwgRGlzdHJpdG8gZGUgQXRlIFZpdGFydGUsIDIwMTMuIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy5ibGluZy5teC9ibG9nL2NvbnRyb2wtZmluYW5jZWlyby9tZXRvZG9zLWRlLWFuYWxpc2lzLWZpbmFuY2llcm9zLyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEJsaW5nLiAoMjAyMikuIMK/Q3XDoWxlcyBzb24gbG9zIG3DqXRvZG9zIGRlIGFuw6FsaXNpcyBmaW5hbmNpZXJvcz8gWzcgVElQT1NdLiAgIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy5kb2N1c2lnbi5jb20vZXMtbXgvYmxvZy9jb21vLWF1bWVudGFyLWxhLXJlbnRhYmlsaWRhZCIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIERvY3VzaWduLiAoMjAyMykuIEPDs21vIGF1bWVudGFyIGxhIHJlbnRhYmlsaWRhZCBlbiBsYXMgZW1wcmVzYXMuIFJlY3VwZXJhZG8gZGUgIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VU84eGlfR2ZXNmMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBGYWN1bHRhZCBkZSBlc3R1ZGlvcyBhIGRpc3RhbmNpYS4gKDIwMjEsIGFnb3N0byAxMykuIMK/Q3XDoWxlcyBzb24gbG9zIGVsZW1lbnRvcyBkZSBsb3MgZXN0YWRvcyBmaW5hbmNpZXJvcz8gVW5pdmVyc2lkYWQgTWlsaXRhciBOdWV2YSBHcmFuYWRhLiBbQXJjaGl2byBkZSB2aWRlb10gWW91VHViZS4gCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}